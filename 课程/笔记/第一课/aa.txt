#
# MAINTAINER        Carson,C.J.Zeong <zcy@nicescale.com>
# DOCKER-VERSION    1.6.2
#
# Dockerizing CentOS7: Dockerfile for building CentOS images
#
FROM       centos:centos7.1.1503 # 基础镜像
MAINTAINER Carson,C.J.Zeong <zcy@nicescale.com> # 谁创建，谁维护

ENV TZ "Asia/Shanghai"     # 环境变量可以写多个
ENV TERM xterm

ADD aliyun-mirror.repo /etc/yum.repos.d/CentOS-Base.repo # add 文件也可以写多个， 这条命令是复制文件到 docker里边
ADD aliyun-epel.repo /etc/yum.repos.d/epel.repo # add命令比copy多两个功能 1。可以写http地址直接拷贝到容器里 2.可以自动解压文件到容器里

RUN yum install -y curl wget tar bzip2 unzip vim-enhanced passwd sudo yum-utils hostname net-tools rsync man && \
    yum install -y gcc gcc-c++ git make automake cmake patch logrotate python-devel libpng-devel libjpeg-devel && \
    yum install -y --enablerepo=epel pwgen python-pip && \
    yum clean all  # run指令就是在linux里边里边执行

RUN pip install supervisor  # 进程管理工具
ADD supervisord.conf /etc/supervisord.conf  # 添加主配置文件

RUN mkdir -p /etc/supervisor.conf.d && \  # supervisord配置文件目录
    mkdir -p /var/log/supervisor # supervisord日志目录

EXPOSE 22  # 暴露容器22号端口给宿主机

ENTRYPOINT ["/usr/bin/supervisord", "-n", "-c", "/etc/supervisord.conf"]  #  最后一条生效，每次都需要执行的命令，每次启动的时候





###########################
# 构建第一镜像
# 完整命名
# docker build -t registry_url/namespace/csphere/centos:7.1

# 7.1 是版本号，不给是latest
# . Dockerfile 表示此文件在当前目录下 ，否则要给定完整目录名
docker build -t csphere/centos:7.1 .

#######################################
# 运行一个容器 docker run
# -it 前台启动,显示到当前终端(tty)
# -d 会把容器在后台，且返回容器长id号
# -P 宿主机随机使用一个端口(宿主机不用指定端口) 映射到docker 22端口
# -p 固定2222 映射到docker 22端口,直到容器停止删除 
# --name 给容器起名，方便后续管理
# csphere/centos:7.1 基于此镜像创建容器
docker  run -d -p 2222:22 --name base csphere/centos:7.1
d1e5288905daae334154fda9d6f9bd711c92ce028b5f676758c0c2e08803b970

##############################################
# 查看容器
# 查看运行状态下的所有容器
docker ps
CONTAINER ID        IMAGE                COMMAND                  CREATED              STATUS              PORTS                  NAMES
d1e5288905da        csphere/centos:7.1   "/usr/bin/supervisord"   About a minute ago   Up About a minute   0.0.0.0:2222->22/tcp   base

# 查看所有容器，
# CONTAINER ID：容器短id号
# IMAGE 从哪个镜像创建此容器
# COMMAND 启动容器时的命令
# CREATED 创建时间
# PORTS 端口映射
# NAMES 容器名字
docker ps -a
CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS                    PORTS                  NAMES
d1e5288905da        csphere/centos:7.1   "/usr/bin/supervisord"   16 minutes ago      Up 16 minutes             0.0.0.0:2222->22/tcp   base
239b76773d9a        a15ab1f794f4         "/bin/sh"                16 hours ago        Exited (0) 7 hours ago                           cocky_ardinghelli
5b3cffe28998        2b8fd9751c4c         "/bin/echo hello word"   17 hours ago        Exited (0) 17 hours ago                          stoic_perlman


# 构建容器思路，有一个基础镜像，中间件镜像，应用镜像
###########################################
# 例子1 Start
# 构建一个 base + php-fpm 镜像
pwd
/root/docker-training/php-fpm
ls
Dockerfile  nginx_default.conf  nginx_nginx.conf  php_www.conf  supervisor_nginx.conf  supervisor_php-fpm.conf

cat Dockerfile
#
# MAINTAINER        Carson,C.J.Zeong <zcy@nicescale.com>
# DOCKER-VERSION    1.6.2
#
# Dockerizing php-fpm: Dockerfile for building php-fpm images
#
FROM       csphere/centos:7.1 # 基于csphere/centos:7.1作为父镜像作为
MAINTAINER Carson,C.J.Zeong <zcy@nicescale.com>

# Set environment variable
ENV APP_DIR /app  # 变量

RUN     yum -y swap -- remove fakesystemd -- install systemd systemd-libs && \
        yum -y install nginx php-cli php-mysql php-pear php-ldap php-mbstring php-soap php-dom php-gd php-xmlrpc php-fpm php-mcrypt && \ 
    yum clean all # 安软件包

ADD nginx_nginx.conf /etc/nginx/nginx.conf
ADD nginx_default.conf /etc/nginx/conf.d/default.conf

ADD php_www.conf /etc/php-fpm.d/www.conf
RUN sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/php.ini

RUN mkdir -p /app && echo "<?php phpinfo(); ?>" > ${APP_DIR}/info.php # 创建测试文件

EXPOSE  80 443 # 容器暴露两个端口

ADD supervisor_nginx.conf /etc/supervisor.conf.d/nginx.conf
ADD supervisor_php-fpm.conf /etc/supervisor.conf.d/php-fpm.conf

ONBUILD ADD . /app   # ONBUILD 对于dockerfile当中非常重要，对于以后开发heck，发布产品，
ONBUILD RUN chown -R nginx:nginx /app  # 有一个php from的时候才生效，会在下一个镜像里生效
#####
# 构建镜像
# 镜像起名最好见名思意
docker build -t csphere/php-fpm:5.4 .

# 查看生成的镜像
docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE
csphere/php-fpm     5.4                 f1fdd907b89d        23 seconds ago      685.5 MB

# 运行容器, 用代理转发
docker run -d -p 8080:80 --name website csphere/php-fpm:5.4
cc63b313e5016808e198fc787ceb9e60b6a7a1ba8b99704ba8aae4996889a65e

# 测试
curl -I http://123.56.72.160:8080/info.php
HTTP/1.1 200 OK
Server: nginx/1.10.1
Date: Thu, 15 Sep 2016 02:08:41 GMT
Content-Type: text/html
Connection: keep-alive
Vary: Accept-Encoding
X-Powered-By: PHP/5.4.16

# 连接到容器里
# -it website /bin/bash 连接到哪个容器，执行什么命令
docker exec -it website /bin/bash
[root@cc63b313e501 /]# 

# 查看运行的守护进程
[root@cc63b313e501 /]# supervisorctl 
supervisor> status
nginx                            RUNNING   pid 7, uptime 0:09:55
php-fpm                          RUNNING   pid 8, uptime 0:09:55
# 退出容器界面
supervisor> exit 
[root@cc63b313e501 /]# exit 
exit

# 例子1 End

##############################################
# 例子2
# 构建mysql镜像 start
pwd
/root/docker-training/mysql
ls -l
total 12
-rw-r--r-- 1 root root  497 Sep 15 01:11 Dockerfile
-rw-r--r-- 1 root root  282 Sep 15 10:22 mysqld_charset.cnf
drwxr-xr-x 2 root root 4096 Sep 15 01:11 scripts

cat Dockerfile 
#
# MAINTAINER        Carson,C.J.Zeong <zcy@nicescale.com>
# DOCKER-VERSION    1.6.2
#
# Dockerizing Mariadb: Dockerfile for building Mariadb images
#
FROM csphere/centos:7.1  # 从哪个镜像构建
MAINTAINER Carson,C.J.Zeong <zcy@nicescale.com>

ENV DATA_DIR /var/lib/mysql  # 环境变量

# Install Mariadb
RUN yum install -y mariadb mariadb-server && \
    yum clean all

ADD mysqld_charset.cnf /etc/my.cnf.d/

COPY scripts /scripts   # 从本地复制文件
RUN chmod +x /scripts/start # 加执行权限

EXPOSE 3306  # 暴露端口

VOLUME ["/var/lib/mysql"]   # 防止容器删除后，数据一并删除,(相当于将宿主机的目录，映射到容器里，删除了容器，数据目录还在

ENTRYPOINT ["/scripts/start"]  # 启动脚本

#################
#  脚本内容
pwd
/root/docker-training/mysql/scripts
ls
firstrun  firstrun_maria  start

cat start 
#!/bin/bash

set -e # 当执行一条命令错误的时候，不会再往下执行，直接退出

#
# When Startup Container script
#

if [[ -e /scripts/firstrun ]]; then
    # config mariadb
    /scripts/firstrun_maria
    rm /scripts/firstrun
else
    # Cleanup previous mariadb sockets
    if [[ -e ${DATA_DIR}/mysql.sock ]]; then
        rm -f ${DATA_DIR}/mysql.sock
    fi
fi

exec /usr/bin/mysqld_safe   # 通过exec启动mysql



cat firstrun_maria 
#!/bin/bash
# 定义了两个变量用户名密码
# 初始化操作

DB_USER=${DB_USER:-admin}
DB_PASS=${DB_PASS:-csphere2015}

MARIADB_NEW=true

#
#  MariaDB setup
#
firstrun_maria() {

    # First install mariadb
    if [[ ! -d ${DATA_DIR}/mysql ]]; then
        echo "===> MariaDB not install..."

        echo "===> Initializing maria database... "
        mysql_install_db --user=mysql --ldata=${DATA_DIR}
        echo "===> System databases initialized..."

        # Start mariadb
        /usr/bin/mysqld_safe --user mysql > /dev/null 2>&1 &

        echo "===> Waiting for MariaDB to start..."

        STA=1
        while [[ STA -ne 0 ]]; do
            printf "."
            sleep 5
            mysql -uroot -e "status" > /dev/null 2>&1
            STA=$?
        done
        echo "===> Start OK..."

        # 1. Create a localhost-only admin account
        mysql -u root -e "CREATE USER '$DB_USER'@'%' IDENTIFIED BY '$DB_PASS'"
        mysql -u root -e "CREATE USER '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASS'"
        mysql -u root -e "CREATE USER '$DB_USER'@'127.0.0.1' IDENTIFIED BY '$DB_PASS'"
        mysql -u root -e "GRANT ALL PRIVILEGES ON *.* TO '$DB_USER'@'%' WITH GRANT OPTION"
        echo "===> Create localhost completed..."

        # shutdown mariadb to wait for supervisor
        mysqladmin -u root shutdown

    else
        if [[ -e ${DATA_DIR}/mysql.sock ]]; then
            rm -f ${DATA_DIR}/mysql.sock
        fi

        MARIADB_NEW=false

        echo "===> Using an existing volume of MariaDB"
    fi
}

firstrun_maria


##############
# 构建镜像
docker build -t csphere/mysql:5.5 .
Successfully built ad4c32c591e1

# 查看生成的镜像
docker images
REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE
csphere/mysql       5.5                 ad4c32c591e1        About a minute ago   725.1 MB
csphere/php-fpm     5.4                 f1fdd907b89d        50 minutes ago       685.5 MB
csphere/centos      7.1                 b459c3d36f07        7 hours ago          591.4 MB
centos              centos7.1.1503      285396d0a019        2 weeks ago          212.1 MB

# 启动容器
docker run -d -p 3306:3306 --name dbserver csphere/mysql:5.5
f15b24046a658164c5aec5cebeedb80110aff08034ff3a02bc5240b108bace5c
# 状态
docker ps -a
CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                    PORTS                                   NAMES
f15b24046a65        csphere/mysql:5.5     "/scripts/start"         29 seconds ago      Up 28 seconds             22/tcp, 0.0.0.0:3306->3306/tcp          dbserver

# 进入交互式模式
docker exec -it dbserver '/bin/bash'
[root@f15b24046a65 /]# 

[root@f15b24046a65 /]# mysql
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 1
Server version: 5.5.50-MariaDB MariaDB Server

Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]> USE test; 
Database changed
MariaDB [test]> SELECT VERSION();
+----------------+
| VERSION()      |
+----------------+
| 5.5.50-MariaDB |
+----------------+
1 row in set (0.00 sec)

# 退出
[root@f15b24046a65 /]# exit

 # 因为启动的时候没有挂载卷,现将数据库容器删除
docker rm dbserver     # 此命令只能删除一个exist状态的容器，正在运行的容器无法删除
docker rm -f dbserver  # 强制删除 
dbserver

# 加上-v
# 用法 冒号前边是宿主机目录，后边是映射到容器的目录
# docker run -d -p 3306:3306 -v host_dir:container_dir ...
docker run -d -p 3306:3306 -v /var/lib/docker/vfs/dir/mydata:/var/lib/mysql csphere/mysql:5.5
6740e22014bc6420a9df2b01e6ce13359b6871e90baee94e1530f8c851ac273c

docker ps -a
CONTAINER ID        IMAGE                 COMMAND                  CREATED              STATUS                    PORTS                                   NAMES
6740e22014bc        csphere/mysql:5.5     "/scripts/start"         About a minute ago   Up About a minute         22/tcp, 0.0.0.0:3306->3306/tcp          compassionate_euler

# 连接到容器里
docker exec -it 6740e  /bin/bash

# 验证容器和宿主机数据同步
docker exec -it 6740e  /bin/bash
[root@6740e22014bc /]# mysql
Welcome to the MariaDB monitor.  Commands end with ; or \g.
Your MariaDB connection id is 1
Server version: 5.5.50-MariaDB MariaDB Server

Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

MariaDB [(none)]> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test               |
+--------------------+
4 rows in set (0.00 sec)

MariaDB [(none)]> CREATE DATABASE mydb;
Query OK, 1 row affected (0.00 sec)

MariaDB [(none)]> SHOW DATABASES;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mydb               |
| mysql              |
| performance_schema |
| test               |
+--------------------+
5 rows in set (0.00 sec)
MariaDB [(none)]> Bye
[root@6740e22014bc /]# exit
exit

ls /var/lib/docker/vfs/dir/mydata/  # mydb已经存在
1.000001  1.000003  1.index            aria_log_control  ib_logfile0  mydb   mysql.sock          test
1.000002  1.000004  aria_log.00000001  ibdata1           ib_logfile1  mysql  performance_schema

# 停止容器，验证宿主机数据目录没被删除
docker stop 6740
6740
docker ps -a 
CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                        PORTS                                   NAMES
6740e22014bc        csphere/mysql:5.5     "/scripts/start"         10 minutes ago      Exited (137) 35 seconds ago                                           compassionate_euler
# 删除容器
docker rm 6740
6740
# 目录、数据还存在
ls /var/lib/docker/vfs/dir/mydata/
1.000001  1.000003  1.index            aria_log_control  ib_logfile0  mydb   mysql.sock          test
1.000002  1.000004  aria_log.00000001  ibdata1           ib_logfile1  mysql  performance_schema

# 目前数据目录已经有文件，创建一个新的db容器时，使用现有的数据目录，而不是重新生成
docker run -d -p 3306:3306 --name newdb -v /var/lib/docker/vfs/dir/mydata:/var/lib/mysql csphere/mysql:5.5
d9cda723662a70203d34da1b9c2f7a3ef247447b1a3895066dc349ed649f012b
# 容器已经启动成功
docker ps -a
CONTAINER ID        IMAGE                 COMMAND                  CREATED             STATUS                    PORTS                                   NAMES
d9cda723662a        csphere/mysql:5.5     "/scripts/start"         39 seconds ago      Up 38 seconds             22/tcp, 0.0.0.0:3306->3306/tcp          newdb
# 验证数据是否一致
# mydb数据没有随着mysql容器被删除而删除
[root@d9cda723662a /]# mysql -e 'SHOW DATABASES;'
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mydb               |
| mysql              |
| performance_schema |
| test               |
+--------------------+


# 构建mysql镜像 End

#######################
# WordPress
# 构建一个动态网站 Start
 pwd
/root/docker-training/wordpress
ls    # *php相当于代码文件,如果公司已经使用了docker，将dockerfile放在目录数据下，方便测试
Dockerfile  license.txt      wp-admin              wp-config-sample.php  wp-includes        wp-login.php     wp-signup.php
index.php   readme.html      wp-blog-header.php    wp-content            wp-links-opml.php  wp-mail.php      wp-trackback.php
init.sh     wp-activate.php  wp-comments-post.php  wp-cron.php           wp-load.php        wp-settings.php  xmlrpc.php

cat Dockerfile 
from csphere/php-fpm:5.4 # 基于此镜像构建

add init.sh /init.sh

entrypoint ["/init.sh", "/usr/bin/supervisord", "-n", "-c", "/etc/supervisord.conf"]
# 在php-fpm中 ONBUILD指令会在此文件生效 
# entrypoin   执行 /init.sh 指令后， 接着执行之后的指令

ls -a
.           .dockerignore  license.txt      wp-admin              wp-config-sample.php  wp-includes        wp-login.php     wp-signup.php
..          index.php      readme.html      wp-blog-header.php    wp-content            wp-links-opml.php  wp-mail.php      wp-trackback.php
Dockerfile  init.sh        wp-activate.php  wp-comments-post.php  wp-cron.php           wp-load.php        wp-settings.php  xmlrpc.php

cat .dockerignore  # 除了此文件(Dockerfile)不进行拷贝，其他全部拷贝/app目录下
Dockerfile

cat init.sh 
#!/bin/bash
set -e

cd /app

if [ -n "$MYSQL_PORT_3306_TCP" ]; then
    if [ -z "$WORDPRESS_DB_HOST" ]; then
        WORDPRESS_DB_HOST='mysql'
    else
        echo >&2 'warning: both WORDPRESS_DB_HOST and MYSQL_PORT_3306_TCP found'
        echo >&2 "  Connecting to WORDPRESS_DB_HOST ($WORDPRESS_DB_HOST)"
        echo >&2 '  instead of the linked mysql container'
    fi
fi

if [ -z "$WORDPRESS_DB_HOST" ]; then
    echo >&2 'error: missing WORDPRESS_DB_HOST and MYSQL_PORT_3306_TCP environment variables'
    echo >&2 '  Did you forget to --link some_mysql_container:mysql or set an external db'
    echo >&2 '  with -e WORDPRESS_DB_HOST=hostname:port?'
    exit 1
fi

# if we're linked to MySQL, and we're using the root user, and our linked
# container has a default "root" password set up and passed through... :)
: ${WORDPRESS_DB_USER:=root}
if [ "$WORDPRESS_DB_USER" = 'root' ]; then
    : ${WORDPRESS_DB_PASSWORD:=$MYSQL_ENV_MYSQL_ROOT_PASSWORD}
fi
: ${WORDPRESS_DB_NAME:=wordpress}

if [ -z "$WORDPRESS_DB_PASSWORD" ]; then
    echo >&2 'error: missing required WORDPRESS_DB_PASSWORD environment variable'
    echo >&2 '  Did you forget to -e WORDPRESS_DB_PASSWORD=... ?'
    echo >&2
    echo >&2 '  (Also of interest might be WORDPRESS_DB_USER and WORDPRESS_DB_NAME.)'
    exit 1
fi

if ! [ -e index.php -a -e wp-includes/version.php ]; then
    echo >&2 "WordPress not found in $(pwd) - copying now..."
    if [ "$(ls -A)" ]; then
        echo >&2 "WARNING: $(pwd) is not empty - press Ctrl+C now if this is an error!"
        ( set -x; ls -A; sleep 10 )
    fi
    tar cf - --one-file-system -C /usr/src/wordpress . | tar xf -
    echo >&2 "Complete! WordPress has been successfully copied to $(pwd)"
    if [ ! -e .htaccess ]; then
        # NOTE: The "Indexes" option is disabled in the php:apache base image
        cat > .htaccess <<-'EOF'
            # BEGIN WordPress
            <IfModule mod_rewrite.c>
            RewriteEngine On
            RewriteBase /
            RewriteRule ^index\.php$ - [L]
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteCond %{REQUEST_FILENAME} !-d
            RewriteRule . /index.php [L]
            </IfModule>
            # END WordPress
        EOF
        chown nginx:nginx .htaccess
    fi
fi

# TODO handle WordPress upgrades magically in the same way, but only if wp-includes/version.php's $wp_version is less than /usr/src/wordpress/wp-includes/version.php's $wp_version

if [ ! -e wp-config.php ]; then
    awk '/^\/\*.*stop editing.*\*\/$/ && c == 0 { c = 1; system("cat") } { print }' wp-config-sample.php > wp-config.php <<'EOPHP'
// If we're behind a proxy server and using HTTPS, we need to alert Wordpress of that fact
// see also http://codex.wordpress.org/Administration_Over_SSL#Using_a_Reverse_Proxy
if (isset($_SERVER['HTTP_X_FORWARDED_PROTO']) && $_SERVER['HTTP_X_FORWARDED_PROTO'] === 'https') {
    $_SERVER['HTTPS'] = 'on';
}
EOPHP
    chown nginx:nginx wp-config.php
fi

set_config() {
    key="$1"
    value="$2"
    php_escaped_value="$(php -r 'var_export($argv[1]);' "$value")"
    sed_escaped_value="$(echo "$php_escaped_value" | sed 's/[\/&]/\\&/g')"
    sed -ri "s/((['\"])$key\2\s*,\s*)(['\"]).*\3/\1$sed_escaped_value/" wp-config.php
}

set_config 'DB_HOST' "$WORDPRESS_DB_HOST"
set_config 'DB_USER' "$WORDPRESS_DB_USER"
set_config 'DB_PASSWORD' "$WORDPRESS_DB_PASSWORD"
set_config 'DB_NAME' "$WORDPRESS_DB_NAME"

# allow any of these "Authentication Unique Keys and Salts." to be specified via
# environment variables with a "WORDPRESS_" prefix (ie, "WORDPRESS_AUTH_KEY")
UNIQUES=(
    AUTH_KEY
    SECURE_AUTH_KEY
    LOGGED_IN_KEY
    NONCE_KEY
    AUTH_SALT
    SECURE_AUTH_SALT
    LOGGED_IN_SALT
    NONCE_SALT
)
for unique in "${UNIQUES[@]}"; do
    eval unique_value=\$WORDPRESS_$unique
    if [ "$unique_value" ]; then
        set_config "$unique" "$unique_value"
    else
        # if not specified, let's generate a random value
        current_set="$(sed -rn "s/define\((([\'\"])$unique\2\s*,\s*)(['\"])(.*)\3\);/\4/p" wp-config.php)"
        if [ "$current_set" = 'put your unique phrase here' ]; then
            set_config "$unique" "$(head -c1M /dev/urandom | sha1sum | cut -d' ' -f1)"
        fi
    fi
done

TERM=dumb php -- "$WORDPRESS_DB_HOST" "$WORDPRESS_DB_USER" "$WORDPRESS_DB_PASSWORD" "$WORDPRESS_DB_NAME" <<'EOPHP'
<?php
// database might not exist, so let's try creating it (just to be safe)
$stderr = fopen('php://stderr', 'w');
list($host, $port) = explode(':', $argv[1], 2);
$maxTries = 10;
do {
    $mysql = new mysqli($host, $argv[2], $argv[3], '', (int)$port);
    if ($mysql->connect_error) {
        fwrite($stderr, "\n" . 'MySQL Connection Error: (' . $mysql->connect_errno . ') ' . $mysql->connect_error . "\n");
        --$maxTries;
        if ($maxTries <= 0) {
            exit(1);
        }
        sleep(3);
    }
} while ($mysql->connect_error);
if (!$mysql->query('CREATE DATABASE IF NOT EXISTS `' . $mysql->real_escape_string($argv[4]) . '`')) {
    fwrite($stderr, "\n" . 'MySQL "CREATE DATABASE" Error: ' . $mysql->error . "\n");
    $mysql->close();
    exit(1);
}
$mysql->close();
EOPHP

exec "$@"


# 构建一个镜像
docker build -t csphere/wordpress:4.2 /root/docker-training/wordpress/
Sending build context to Docker daemon  19.8 MB
Step 1 : FROM csphere/php-fpm:5.4
# Executing 2 build triggers...    -->触发了两个triggers
Step 1 : ADD . /app
Step 1 : RUN chown -R nginx:nginx /app
 ---> Running in 68524dcd9cf5
 ---> 2632fb8d6888
Removing intermediate container 40cf624534a8
Removing intermediate container 68524dcd9cf5
Step 2 : ADD init.sh /init.sh
 ---> cb0e7c953b57
Removing intermediate container 94cfb272a57d
Step 3 : ENTRYPOINT /init.sh /usr/bin/supervisord -n -c /etc/supervisord.conf
 ---> Running in 2aaf29bcf6b5
 ---> 2dc1403976dc
Removing intermediate container 2aaf29bcf6b5
Successfully built 2dc1403976dc

# 查看镜像
docker images
REPOSITORY          TAG                 IMAGE ID            CREATED              SIZE
csphere/wordpress   4.2                 2dc1403976dc        About a minute ago   723.1 MB

# 内网地址
ip a l eth0
2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:16:3e:03:78:21 brd ff:ff:ff:ff:ff:ff
    inet 10.173.39.46/21 brd 10.173.39.255 scope global eth0
       valid_lft forever preferred_lft forever
# 运行容器  -p -e 可以有多个
docker run -d -p 80:80 --name wordpress -e WORDPRESS_DB_HOST=10.173.39.46 -e WORDPRESS_DB_USER=admin -e WORDPRESS_DB_PASSWORD=csphere2015 csphere/wordpress:4.2 
6db3c64d2bdc6c11e484ce0e4395014c0a7c83abc87a941fc59930eb46f96d6d

# 容器成功启动
ocker ps -a
CONTAINER ID        IMAGE                   COMMAND                  CREATED             STATUS                    PORTS                                   NAMES
6db3c64d2bdc        csphere/wordpress:4.2   "/init.sh /usr/bin/su"   48 seconds ago      Up 47 seconds             22/tcp, 443/tcp, 0.0.0.0:80->80/tcp     wordpress

# 附件有图文显示

# 构建一个动态网站 End



###############################
# entrypoint 和 CMD 区别
entrypoint 
entrypoint 只有最后一条生效，如果写了多行 entrypoint的情况下(运行一个docker容器就像运行一个程序一样)
# 两种写法
1. 数组形式
ENTRYPOINT ["executable","param1","param2"]  # (建议使用此形式，进程启动起来pid就是1)
2. 
ENTRYPOINT command1 param1 param2 (shell from) # (pid就是执行完shell的pid号)
docker run -it -entrypoint=覆盖Dockerfile ENTRYPOINT[]

CMD
1. 数组形式
CMD ["executable","param1","param2"] (exec from,this is the preferred from)
2. 
CMD ["param1", "param2"] (as default parameters to ENTRYPOINT)
3. 
CMD  command param1 param2 (shell from)
第三种方法(shell from): 是以 '/bin/sh -c '的方法执行的命令
例子：
CMD ["/bin/echo","this is CMD"]
docker run -it -rm csphere/cmd:0.1 /bin/bash


######
构建一个 Dockerfile 验证CMD

1.
vim Dockerfile
FROM centos:centos7.1.1503

CMD ["/bin/echo","this is a test cmd"]
2.
docker build -t zrdcentos/cmd:0.1 .
Sending build context to Docker daemon 183.1 MB
Step 1 : FROM centos:centos7.1.1503
 ---> 285396d0a019
Step 2 : CMD /bin/echo this is a test cmd
 ---> Running in b94d718d70c7
 ---> f76d8da65c54
Removing intermediate container b94d718d70c7
Successfully built f76d8da65c54
3.
#  通过zrdcentos/cmd:0.1镜像来启动一个容器

docker run -it zrdcentos/cmd:0.1
this is a test cmd

docker run -it zrdcentos/cmd:0.1 /bin/bash # 连接到容器里

#############################
# 构建一个 Dockerfile 验证ENTRYPOINT
vim Dockerfile 

FROM centos:centos7.1.1503

ENTRYPOINT ["/bin/echo","this is a test entrypoint"]

1.
docker build -t zrdcentos/ent:0.1 .
Sending build context to Docker daemon 183.1 MB
Step 1 : FROM centos:centos7.1.1503
 ---> 285396d0a019
Step 2 : ENTRYPOINT /bin/echo this is a test entrypoint
 ---> Running in 47c9c3da0f07
 ---> f3ba2d31f37f
Removing intermediate container 47c9c3da0f07
Successfully built f3ba2d31f37f
2. 
docker run -it zrdcentos/ent:0.1
this is a test entrypoint

3.
docker run -it zrdcentos/ent:0.1 /bin/bash  # 上边例子(CMD)的echo 被替换成/bin/bash，而entrypoint不能将/bin/echo替换
this is a test entrypoint /bin/bash

# entrypoint不可能替换掉
docker run -it --entrypoint=/bin/bash   # 来覆盖掉Dockerfile里边的entrypoint的指定/bin/echo指令
[root@d08116f6a934 /]# 
